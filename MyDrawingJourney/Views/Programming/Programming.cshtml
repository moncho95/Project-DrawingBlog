@{
    ViewData["Title"] = "Programming";
}
<!DOCTYPE html>
<html lang="en">
<head>
<title>Programming</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
* {
  box-sizing: border-box;
}

body {
  font-family: Arial, Helvetica, sans-serif;
}

.container {
  position: relative;
}

.center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 58px;
}

img { 
  width: 100%;
  height: auto;
  opacity: 0.5;
}

/* Create two columns/boxes that floats next to each other */
#page-nav {
  float: left;
  width: 30%;  
  background: #ccc;
  padding: 20px;
}

/* Style the list inside the menu */
#page-nav {
  list-style-type: none;
  padding: 0;
}

article {
  float: left;
  padding: 20px;
  width: 100%;
  background-color: #f1f1f1;
  
}
.intro{
    float: left;
  padding: 20px;
  width: 70%;
  background-color: darkgrey;
  
}
/* Clear floats after the columns */
section::after {
  content: "";
  display: table;
  clear: both;
}


</style>
</head>
<body>

<div class="container">
  <img src="~/img/programming/computer.jpg" alt="Computer" width="1000" height="300">
  <div class="center">Programming Journey</div>
  </div>

<section>
  <nav id="page-nav">
    <ul>
      <li><a href="#section1">Fundamentals</a></li>
      <li><a href="#section2">Advanced</a></li>
      <li><a href="#section3">Web</a></li>
    </ul>
  </nav>
  
  <article class="intro">
    <h1>Brief story</h1>
    
    <p>Although I was a bit familiar with programming before enrolling to the Software University, almost everything I know about code comes namely from SoftUni.
        I learned a lot over the past year and a half and I had the time of my life while doing it. Here I'd like to show some of my gained knowledge to the reader, divided 
        in sections as is my path to becoming a Web developer. Databases and front-end are skipped, althouth I excelled in them too.
    </p>
    <p>Enter your name for a greeting.</p>
    <form method="post" action="Greetings">
        First Name: <input type="text" name="fname"><br>
        Last Name: <input type="text" name="lname"><br><br>
        <input type="submit" value="Submit">
    </form>
  </article>
</section>
<hr/>
<section id="section1">
    <article>
    <h1>Fundamentals</h1>
    <p>In the Fundamentals model last year we've learned about basic syntax, conditional loops,
        data-types and variables, http-basics, arrays, html and css, methods, list, object and classes,
        associative arrays, text processing and regular expressions.<br/>Here I'd like to show you some of my acquired knowledge :)

    </p>
    <p>Enter your name for a cup of coffee.</p>
    <form method="post" action="Coffee">
        Name: <input type="text" name="fname"><br>
        <input type="submit" value="Submit">
    </form>
    
    <br/>
    <br/>
    <p>
        Beside learnining about nested loops and cycles, I learned also about text processing and regex.
        Here I'd like to demontrate to you a cipher at work, namely Ceaser cipher. It is a type of substitution cipher in which each letter in the plaintext 
        is replaced by a letter 
        some fixed number of positions down the alphabet. For example,
        with a left shift of 3, D would be replaced by A, E would become B, and so on.
    </p>
    <p>Enter your message to be encrypted.</p>
    <form method="post" action="Cipher">
        Message: <input type="text" name="mesg"><br>
        <input type="submit" value="Submit">
    </form>
    <br />
    <p>To implement Ceaser's cypher one must have knowledge of data types, loops, arrays and basic syntax, only part
        of the things I learned during the Fundamental's module. However, it wasn't until I began the Advanced module
        that my full curiosity about what I can do came into blossom. 
    </p>
    </article>
    </section>
    <hr/>
<section id="section2">
    <article>
    <h1>Advanced</h1>
    <p>In C# Advanced we've learned about stacks and queues, multidimentional arrays, sets and dictionaries, 
        Functional programming, defining classes, implementing linked list, generics, iterators and comparators.

    </p>
    <br/>
    <p>
        Type a message to be reversed with <i>Stack</i> data structure.
    </p>
    <form method="post" action="Stack">
        Message: <input type="text" name="str"><br>
        <input type="submit" value="Submit">
    </form>
            @{
                var message = ViewBag.Message;
            }
    <p>@message</p>
    <br />
    <br/>
    <p>I also learned about <i>matrices</i> and <i>jagged arrays</i>.Jagged array is a array of arrays such that member arrays can be of different sizes. In other words, the length of each array index can differ.
        Click on Jagged Array button to see an array with random numbers.
    </p>
    <form method="post" action="Arrays">       
        <input type="submit" value="Jagged Array">
    </form>
    <br />
    <br/>
    <p>I also learned about <i>Sets and Dictionaries</i><br/>
        Here's a small program that with the help of dictionary can tell how many times a word in the text: 
        <br/><i>"Mary had a little lamb  <br/>

        little Lamb, little Lamb,  <br/>

        Mary had a Little lamb,  <br/>

        whose fleece were white as snow."</i>
        occures.
    </p>

     <form method="post" action="Dictionary">
        Type a word to search for: <input type="text" name="str"><br>
        <input type="submit" value="Submit">
    </form>
    <br/>
    <br/>
    <p>A LinkedList is a linear data structure which stores element in the non-contiguous location. The elements in a linked list are linked with each other using pointers. Or in other words, LinkedList consists of nodes 
        where each node contains a data field and a reference(link) to the next node in the list.</p>
    <br/>
    <p>I created a linked-list, which stores some of the most popular bulgarian names for boys.
        Try and guess a name.
    </p>
        <form method="post" action="PopularNames">
        Type a popular bulgarian male name: <input type="text" name="str"><br>
        <input type="submit" value="Submit">
    </form>
    <br/>
    <br/>
     <p>Generally, <i>functional programming</i> means using functions to the best effect for creating clean and maintainable software.
<br/>Using functional programming I created a simple calculator. Check it out (valid operations: +,-,/,*)
    </p>
    <form method="post" action="FunctProgramming">
        Type two numbers and an operation: <br/>
        <input type="text" name="numone"><br>
        <input type="text" name="op"><br>
        <input type="text" name="numtwo"><br>
        <input type="submit" value="Submit">
    </form>
    <br/>
    <br/>
    <p><i>Generic</i> is a class which allows the user to define classes and methods with the placeholder. 
        The basic idea behind using Generic is to allow type (Integer, String, … etc and user-defined types) to be a parameter to 
        methods, classes, and interfaces.  </p>

    <p>That wa a part of the things I learned during the Advanced module.Next I'd like to write about 
        <i>Object Orientated Programming</i></p>
        <br/>
        <br/>
        <h1>OOP</h1>
        <p>C# is an object-oriented programming language. The four basic principles of object-oriented programming are:</p>
        <ol>
            <li><i>Abstraction</i> Modeling the relevant attributes and interactions of entities as classes to define an abstract representation of a system.</li>
            <li><i>Encapsulation </i> Hiding the internal state and functionality of an object and only allowing access through a public set of functions.</li>
            <li><i>Inheritance  </i>Ability to create new abstractions based on existing abstractions.</li>
            <li><i>Polymorphism  </i>Ability to implement inherited properties or methods in different ways across multiple abstractions.</li>
        </ol>
    </article>
</section>
<hr/>
<section id="section3">
    <article>
    <h1>Web</h1>
    <p></p>
    </article>
</section>
<hr/>

</body>
</html>